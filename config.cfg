[Options]
# Realrobot (y)es/(n)o/(a)sk : Whether this is an experience
# with a real robot or a V-REP simulation
RealRobot = y

# LogFileName : the file path (inside the logs/ folder)
# in which the data will be saved (leave empty to disable save)
LogFileName = last.json

# Description : sentence that will be saved in the log
# And displayed with graph_displayer
# Note that [duration] will be replaced by the actual duration
Description = This simulation took [duration] seconds.

# WeightFileName : the file path that will store the state of the
# network after the experience (leave empty to disable save)
WeightFileName = weights.json

# NeuronFileName : the file path (inside the networks/ folder)
# in which the successive neuron wieght will be saved
# (leave empty to disable)
NeuronFileName = last.json

# Verbose (y)es/(n)o/(a)sk : if enabled, each information display will
# be on a new line. If not, the same line will be updated periodically
Verbose = y

# SingleSimulation (0/1) : if disabled, the program will do successive
# simulations (successive experiences should not be done with a real robot)
SingleSimulation = 1

# StopAutomatically (y)es/(n)o/(a)sk :
# If enabled, the program will stop as soon as the robot is within
# a certain range from the target for a certain duration.
# The robot is considered as close enough if
# the relative euclidian error is lower than CriterionPercent.
# The duration is defined by the CriterionDuration parameter (in sec.).
StopAutomatically = y
CriterionPercent = 0.05
CriterionDuration = 10

# MaximumDuration : The maximum duration of the experience
# Before it is automatically stopped
MaximumDuration = 0

# Tick : The minimum duration between each iteration of the robot
# Currently this parameter does not matter since the online_trainer
# mainloop takes at least 150 ms to compute because of the computing time
# of get_robot_position and set_motor_velocity
Tick = 0.02

# Prediction (0/1) : If enabled, the trainer will use the new formula when
# computing the gradient. Disabling this is not recommended
# since the old formula does not work in all cases.
Prediction = 1

# ExperimentalTheta (0/1) : If enabled, the theta_shift will be computed using
# the new formula (run old_theta.py and new_theta.py to see the direction fields)
ExperimentalTheta = 0

# Gain : The factor that will affect the gradient computation
Gain = 1

# RestrictThetaShift (0/1) : If enabled, the theta shift will be disabled when
# the error is small but increasing (to prevent final oscillations)
RestrictThetaShift = 0

# RestrictPropagation (0/1) : If enabled, the backpropagation will be disabled
# when the error is increasing. This parameter is not recommended.
RestrictPropagation = 0

# InvertRestriction (0/1) : If enabled along with RestrictPropagation,
# the backpropagation will be disabled when the error is reducing.
# This parameter is not recommended.
InvertRestriction = 0

# NewSigmoid (0/1) : If enabled, the gradient computation will use the
# experimental sigmoid function. This parameter is not recommended.
NewSigmoid = 0

# RandomRatio : If greater than 0, the network will apply random updates when the
# error is increasing. The maximum modification is [current weight] * RandomRatio.
# This parameter is not recommended (the robot does not converge when it is enabled)
RandomRatio = 0

# Load : (y)es/(n)o/(a)sk : If enabled, the network will load weight
# from the weight file (see the WeightFileName parameter).
# If disabled, a random network will be used.
Load = n

# Learn : (y)es/(n)o/(a)sk : If enabled, the backpropagation algorithm will be used
# To update the neuron network. This should remain enabled
# unless the robot loads a weight file after enough lessons.
Learn = y

# HiddenNeuronNumber : The number of neuron
# in the hidden layer of the neuron network
HiddenNeuronNumber = 3

# LearningStep : The learning step of the backpropagation algorithm
LearningStep = 0.1

# ThetaShiftRatio : The ratio used to compute the theta_shift
# The best results have been obtained with a value of 10
ThetaShiftRatio = 1

# Size : The radius of the experience (in meter). This affects the relative
# error computation and the gradient computation (since the error is normalized)
# Note that the relative error should never be greater than 100%
Size = 2

# FixedStartingPosition (0/1) : When enabled, the starting position will be set
# according to the following parameters (note that the theta value is in gradient)
# Currently, the real robot always assume it's starting position to be (0, 0, 0)
FixedStartingPosition = 1
StartingPositionX = 0
StartingPositionY = 0
StartingPositionTheta = 0

# FixedTargetPosition (0/1) : When enabled, the target position will be set
# according to the following parameters (note that the theta value is in gradient, # (fr: radiants)
FixedTargetPosition = 1
TargetPositionX = 1
TargetPositionY = 1
TargetPositionTheta = 1
